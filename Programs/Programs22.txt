
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<semaphore.h>

pthread_mutex_t mutex;
sem_t empty;
sem_t full;
int in=0;
int out=0;
char buffer[3];

void *producer(void *pno)
{
	int item;
	for(int i=0;i<3;i++)
	{
		item=rand()%100;
		sem_wait(&empty);
		pthread_mutex_lock(&mutex);
		buffer[in]=item;
		printf("Producer %d added item %d to %d\n",*((int*)pno),item,in);
		in=(in+1)%3;	
		pthread_mutex_unlock(&mutex);
		sem_post(&full);
	}
}

void *consumer(void *cno)
{
	for(int i=0;i<3;i++)
	{
		int item;
		sem_wait(&full);
		pthread_mutex_lock(&mutex);
		item=buffer[out];
		printf("Consumer %d recieved item %d from %d\n",*((int*)cno),item,out);
		out=(out+1)%3;	
		pthread_mutex_unlock(&mutex);
		sem_post(&empty);
	}
}

int main()
{
	pthread_t pro[3],con[3];
	pthread_mutex_init(&mutex,NULL);
	sem_init(&empty,0,3);
	sem_init(&full,0,0);
	int a[3]={1,2,3};
	
	for(int i=0;i<3;i++)
		pthread_create(&pro[i],NULL,(void*)producer,(void*)&a[i]);
		
	for(int i=0;i<3;i++)
		pthread_create(&con[i],NULL,(void*)consumer,(void*)&a[i]);		
	
	for(int i=0;i<3;i++)
		pthread_join(pro[i],NULL);
	
	for(int i=0;i<3;i++)
		pthread_join(con[i],NULL);
	pthread_mutex_destroy(&mutex);
	sem_destroy(&empty);
	sem_destroy(&full);
	return 0;
}	
