#include<stdio.h>
#include<stdlib.h>

int quantum;

typedef struct process
{
	int BT,tempBT,AT,WT,TAT,CT,id,flag;
}Process;

void sorty(Process pro[],int n)
{
	for(int i=0;i<n-1;i++)
	{
		for(int j=0;j<n-1-i;j++)
		{
			if(pro[j].AT>pro[j+1].AT)
			{
				Process temp=pro[j];
				pro[j]=pro[j+1];
				pro[j+1]=temp;
			}
		}
	}
}


void roundy(Process pro[],int n)
{
	int elapsedTime=pro[0].AT;//
	
	int remainingProcess=n;
	int totalWT=0;
	int totalTAT=0;
	int exec;
	float avgWT=0;
	float avgTAT=0;
	
	int waitQ[n],front=0,rear=0;
	
	waitQ[rear]=0;
	pro[0].flag=1;
	
	while(remainingProcess)
	{
		exec=waitQ[front];
		front=(front+1)%n;
		
		if(pro[exec].tempBT>quantum)
		{
			pro[exec].tempBT-=quantum;
			elapsedTime+=quantum;
			printf("|P%d (%d) %d",pro[exec].id,quantum,elapsedTime);
			
		}
		else
		{
			elapsedTime+=pro[exec].tempBT;
			printf("|P%d (%d) %d",pro[exec].id,pro[exec].tempBT,elapsedTime);
			pro[exec].CT=elapsedTime;
			pro[exec].TAT=pro[exec].CT-pro[exec].AT;
			pro[exec].WT=pro[exec].TAT-pro[exec].BT;
			
			pro[exec].tempBT=0;
			remainingProcess--;
		}
		
		for(int i=0; i<n && pro[i].AT<=elapsedTime ;i++ )
		{
			if(pro[i].flag==1 || pro[i].tempBT==0 || i==exec )
				continue;
				
			rear=(rear+1)%n;
			waitQ[rear]=i;
			
			pro[i].flag=1;
		}
		
		if(pro[exec].tempBT>0)
		{
			rear=(rear+1)%n;
			waitQ[rear]=exec;
		}
	}
	printf("|\n");
	printf("Observation table: \n");
	printf("PID\tAT\tBT\tCT\tWT\tTAT\n");
	for(int i=0;i<n;i++)
	{
		printf("%d\t%d\t%d\t%d\t%d\t%d\n",pro[i].id,pro[i].AT,pro[i].BT,pro[i].CT,pro[i].WT,pro[i].TAT);
		totalWT+=pro[i].WT;
		totalTAT+=pro[i].TAT;
	}
	avgWT=(float)totalWT/n;
	avgTAT=(float)totalTAT/n;
	printf("\nAverage waiting time: %.2lf",avgWT);
	printf("\nAverage turn around time: %.2lf\n",avgTAT);
}


int main()
{
	int n;
	printf("\nEnter the number of processes: ");
	scanf("%d",&n);
	
	Process pro[n];
	
	for(int i=0;i<n;i++)
	{
		printf("\nProcess number %d:\n",i+1);
		printf("Enter its arrival time: ");
		scanf("%d",&pro[i].AT);
		printf("Enter its burst time: ");
		scanf("%d",&pro[i].BT);
		
		pro[i].tempBT=pro[i].BT;
		
		pro[i].id=i+1;
		pro[i].flag=0;
	}

	printf("\nEnter the time quantum: ");
	scanf("%d",&quantum);
	
	sorty(pro,n);
	roundy(pro,n);
	
	return 0;
}